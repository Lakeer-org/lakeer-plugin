# -*- coding: utf-8 -*-
"""
/***************************************************************************
 lakeer_plugin
                                 A QGIS plugin
 lakeer plugin to import/export data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-06
        git sha              : $Format:%H$
        copyright            : (C) 2019 by lakeer
        email                : amar.kamthe@soft-corner.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant, Qt, QEvent
from PyQt5.QtGui import QIcon, QStandardItem, QStandardItemModel, QColor,  QPainter, QFont, QPalette, QBrush, QPen
from PyQt5.QtWidgets import QAction, QCheckBox, QListWidget, QTreeWidgetItem, QMessageBox, QWidget, QStyledItemDelegate, QStyleOptionButton, QStyle, QTreeWidgetItemIterator
from PyQt5 import QtGui, QtCore
from qgis.core import *#QgsVectorLayer, QgsProject
import qgis
from geomet import wkt
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .lakeer_dialog import lakeer_pluginDialog
import os.path
import math
from .configuration import *
from .progressbar import *
from .layereventhandler import *
from .common import *
import datetime
import json

class lakeer_plugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'lakeer_plugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&lakeer plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.database = Database()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('lakeer_plugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/lakeer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'lakeer plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&lakeer plugin'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        if self.first_start == True:

            self.first_start = False
            self.dlg = lakeer_pluginDialog()
            self.dlg.tabWidget.currentChanged.connect(self.tab_clicked)
            self.tab_clicked(2)

            # self.dlg.tabWidget.currentChanged(0)
            # self.dlg.databaseSetting.activated.connect(self.tab2_configuration)
            self.dlg.button_box.accepted.connect(self.tab1_accept)
            self.dlg.button_box.rejected.connect(self.reject)
            self.dlg.buttonBox.accepted.connect(self.tab2_accept)
            self.dlg.buttonBox.rejected.connect(self.reject)

            self.dlg.pushButton.clicked.connect(self.tab3_accept)
            self.dlg.chkNewLayer.stateChanged.connect(self.chk_display_newlayer)

        self.dlg.show()
        check_database_connection(self)
        # Run the dialog event loop
        # result = self.dlg.exec_()

    def tab_clicked(self, i):
        """
        Tab selection load elements.
        :param i:
        :return:
        """
        tab_selection = [self.tab_loaddata, self.tab_savelayer, self.tab_configuration]
        val = True
        if i != 2:
            val = check_database_connection(self)
        if val:
            tab_selection[i]()

    def tab_loaddata(self):
        """
        Load layers tab to display tree view uptill 'n' level of metrices and departments combobox.
        :return:
        """
        list_widget = self.dlg.treeWidget
        self.render_tree_widget(list_widget, 0)
        self.renderComboBox()

    def tab_savelayer(self):
        """
        layer save tab load elements - tree view of categories and sub categories, new layers to be saved.
        :return:
        """
        list_widget = self.dlg.treeWidgetMetrics
        self.render_tree_widget(list_widget, 2)
        self.render_layer_to_save()

    def tab_configuration(self):
        """
        Database connection settings load to fields
        :return:
        """
        config = self.database.readSettings()
        self.dlg.txt_databasename_2.setText(config['database_name'])
        self.dlg.txt_host_2.setText(config['host'])
        self.dlg.txt_port_2.setText(config['port'])
        self.dlg.txt_username_2.setText(config['username'])
        self.dlg.txt_password_2.setText(config['password'])


    def reject(self):
        """
        Method to close the window.
        :return:
        """
        self.dlg.close()

    def tab1_accept(self):
        """
            Load layers tab to load metrices and departments.
        """
        proj = QgsProject.instance()
        current_layer =[x.name() for x in proj.mapLayers().values()]

        ####################################################
        ## Load department
        ####################################################
        selected_department = self.dlg.comboBox.currentText()
        if selected_department != '-':
            level_boundaries = self.database.department_polygon(selected_department)
            vectorLayer = None
            if selected_department not in current_layer:
                vectorLayer = QgsVectorLayer('Polygon?crs=epsg:4326', selected_department, 'memory')
                # vectorLayer.setCustomProperty("showFeatureCount", len(list(level_boundaries)))
                proj.addMapLayer(vectorLayer)
            else:
                vectorLayerTemp = proj.mapLayersByName(selected_department)
                if len(vectorLayerTemp) > 0:
                    vectorLayer = vectorLayerTemp[0]
                    vectorLayer.dataProvider().truncate()

            if vectorLayer:
                prov = vectorLayer.dataProvider()
                new_coords = []
                fields = QgsFields()
                for x in ['name', 'level_type']:
                    fields.append(QgsField(x, QVariant.String))
                prov.addAttributes(fields)
                vectorLayer.updateFields()
                fields = prov.fields()
                for level_boundary in level_boundaries:
                    try:
                        polygons = [[[QgsPointXY(point[0], point[1]) for point in polygon] for polygon in multi_polygon] for multi_polygon in level_boundary['geometry']['coordinates']]
                        geom = QgsGeometry.fromMultiPolygonXY(polygons)
                        outGeom = QgsFeature()
                        outGeom.setFields(fields)
                        outGeom.setAttribute('name', level_boundary['name'])
                        outGeom.setAttribute('level_type', level_boundary['level_type'])

                        outGeom.setGeometry(geom)
                        new_coords.append(outGeom)
                    except Exception as e:
                        print (e)

                # single_symbol_renderer = vectorLayer.renderer()
                # symbol = single_symbol_renderer.symbol()
                # symbol.setOpacity(45)
                # symbols = QgsSingleSymbolRenderer(symbol)
                # vectorLayer.triggerRepaint()

                #Seems to work
                symbol = QgsFillSymbol.defaultSymbol(vectorLayer.geometryType())
                symbol.setOpacity(0.6)
                myRenderer = QgsSingleSymbolRenderer(symbol)
                vectorLayer.setRenderer(myRenderer)

                prov.addFeatures(new_coords)
                vectorLayer.updateExtents()
                # print (vectorLayer.featureCount())
        ################################################################
        # Display selected metrics
        #
        ################################################################
        progress_bar = ProgressBar(len(self.dlg.selected_items))
        for index, item in enumerate(self.dlg.selected_items):
            vectorLayer = None
            assets = self.database.service_metrics_geometry(self.check_list[item])
            if assets.count()>0:
                if item not in current_layer:
                    geometry_type = 'Point'
                    if 'type' in assets[0]['geometry']:
                        geometry_type = assets[0]['geometry']['type']
                    vectorLayer = QgsVectorLayer(geometry_type+'?crs=epsg:4326', item, 'memory')

                    proj.addMapLayer(vectorLayer)
                else:
                    vectorLayerTemp = proj.mapLayersByName(item)
                    if len(vectorLayerTemp) >0:
                        vectorLayer = vectorLayerTemp[0]
                        vectorLayer.dataProvider().truncate()

                if vectorLayer:
                    prov = vectorLayer.dataProvider()
                    #fields = prov.fields()
                    #vectorLayer.updateFields()
                    #feat =vectorLayer.getFeatures()
                    #attrs = feat.attributes()
                    #geom = feat.geometry()
                    #coords = geom.asPoint()

                    new_coords =[]
                    fields = QgsFields()
                    for x, y in assets[0]['properties'].items():
                        fields.append(QgsField(x, QVariant.String))
                    prov.addAttributes(fields)
                    vectorLayer.updateFields()
                    fields = prov.fields()
                    for asset in assets:
                        try:
                            if 'type' in asset['geometry'] and 'coordinates' in asset['geometry']:
                                if '_id' in asset['geometry']:
                                    del(asset['geometry']['_id'])
                                if 'created_at' in asset['geometry']:
                                    del(asset['geometry']['created_at'])
                                if 'updated_at' in asset['geometry']:
                                    del(asset['geometry']['updated_at'])
                                geom = QgsGeometry.fromWkt(wkt.dumps(asset['geometry']))

                                outGeom = QgsFeature()
                                outGeom.setGeometry(geom)
                                outGeom.setFields(fields)
                                for x, y in asset['properties'].items():
                                    outGeom.setAttribute(x,str(y))
                                new_coords.append(outGeom)
                        except Exception as e:
                            print (e)
                    #outGeom.setAttributes(attrs)
                    try:
                        if len(new_coords) > 0:
                            prov.addFeatures(new_coords)
                            vectorLayer.updateExtents()
                            # feature_layer = FeatureModifier(vectorLayer)
                    except:
                        pass
            progress_bar.update_progress(index+1)
        root = QgsProject.instance().layerTreeRoot()
        for child in root.children():
            if isinstance(child, QgsLayerTreeLayer):
                child.setCustomProperty("showFeatureCount", True)

        qgis.utils.iface.zoomToActiveLayer()

        self.dlg.close()

    def tab2_accept(self):
        """
        Database connection settings save
        :return:
        """
        config={}
        database_name = self.dlg.txt_databasename_2.text().strip()
        host = self.dlg.txt_host_2.text().strip()
        port = self.dlg.txt_port_2.text().strip()
        username = self.dlg.txt_username_2.text().strip()
        password = self.dlg.txt_password_2.text().strip()


        config['database_name'] = database_name or 'lakeer'
        config['host'] = host or '127.0.0.1'
        config['port'] = port or '27017'
        config['username'] = username or ''
        config['password'] = password or ''
        self.database.writeSettings(config)

        check_database_connection(self, True)

    def tab3_accept(self):
        print("Clicked")
        widget = self.dlg.treeWidgetMetrics
        tree_selection = self.vrfs_selected(widget)
        list_widget = self.dlg.treeWidgetAnalysis
        layer_selection = self.vrfs_selected(list_widget)
        if len(tree_selection)>0 and len(layer_selection)>0:
            if self.save_layers_to_db(tree_selection, layer_selection):
                self.render_layer_to_save(self.dlg.chkNewLayer.isChecked())
        else:
            QMessageBox.critical(self.dlg.centralwidget, 'Message',
                                                  "Please select sub category and layer.",
                                                  QMessageBox.Yes)

    def chk_display_newlayer(self):
        self.render_layer_to_save(self.dlg.chkNewLayer.isChecked())


    def render_tree_widget(self, list_widget, levels):
        """
        Method to display tree view of all the categories and sub categories.
        This loads the treeview for both tabs - Load layer and save layer
        :param list_widget:
        :param levels: 0 - Uptill 3 levels and 2 - uptill two levels
        :return:
        """
        list_widget.clear()
        self.check_list ={}
        categories =self.database.service_categories()
        if levels != 0:
            list_widget.setItemDelegate(Delegate())
        else:
            self.dlg.selected_items = []
        for category in categories:
            targetTree = QTreeWidgetItem([category['name']])
            if levels == 0:
                targetTree.setFlags(targetTree.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
            targetTree.setText(0, category['name'])
            service_categories = self.database.service_per_category(category['_id'])

            for service_category in service_categories:
                pathTree = QTreeWidgetItem([service_category['service_type']])
                if levels == 0:
                    pathTree.setFlags(pathTree.flags() | QtCore.Qt.ItemIsTristate | QtCore.Qt.ItemIsUserCheckable)
                else:
                    pathTree.setFlags(pathTree.flags() | QtCore.Qt.CheckStateRole)
                pathTree.setCheckState(0, QtCore.Qt.Unchecked)
                pathTree.setText(0, service_category['service_type'])
                targetTree.addChild(pathTree)
                if levels == 0:
                    for service in sorted(service_category['metrics'], key=lambda x: x['display_name']):
                        self.check_list[service['display_name']]= service['_id']
                        child = QTreeWidgetItem([service['display_name']])
                        child.setFlags(child.flags() | QtCore.Qt.ItemIsUserCheckable)
                        child.setCheckState(0, QtCore.Qt.Unchecked)
                        child.setText(0, service['display_name'])
                        pathTree.addChild(child)

            list_widget.addTopLevelItem(targetTree)
            list_widget.expandAll()
        list_widget.setHeaderLabels(["Service metrics"])
        if levels == 0:
            list_widget.itemChanged.connect(self.handle_item_changed)

    def handle_item_changed(self, item, column):
        '''
        Method used to detect the selections made in load layer tab.
        :param item:
        :param column:
        :return:
        '''
        if item.checkState(column) == QtCore.Qt.Checked:
            if item.text(0) not in self.dlg.selected_items and item.text(0) in self.check_list.keys():
                self.dlg.selected_items.append(item.text(0))
        elif item.checkState(column) == QtCore.Qt.Unchecked:
            if item.text(0) in self.dlg.selected_items:
                self.dlg.selected_items.remove(item.text(0))

    def vrfs_selected(self, widget):
        iterator = QTreeWidgetItemIterator(widget, QTreeWidgetItemIterator.Checked)
        selected_items= []
        while iterator.value():
            item = iterator.value()
            if item.text(0) not in selected_items:
                selected_items.append(item.text(0))
            iterator += 1
        return selected_items

    def renderComboBox(self):
        """
        Method used to load departments to the dropdown.
        :return:
        """
        self.dlg.items = []
        combobox = self.dlg.comboBox
        combobox.clear()
        combo_list = self.database.fetch_department()
        combobox.addItems(combo_list)

    def render_layer_to_save(self, all_flag=True):
        """
        Render layers that were newly created. Display only those layers in the list.
        :return:
        """
        list_widget = self.dlg.treeWidgetAnalysis
        list_widget.clear()
        list_widget.setItemDelegate(Delegate())
        layers=[]

        proj = QgsProject.instance()
        layers = [x.name() for x in proj.mapLayers().values()]
        departments = self.database.fetch_department()
        layers = list(filter(lambda x:x not in departments, layers))

        if all_flag:
            categories = self.database.service_categories()
            for category in categories:
                service_categories = self.database.service_per_category(category['_id'])
                for service_category in service_categories:
                    for service in sorted(service_category['metrics'], key=lambda x: x['display_name']):
                        if service['display_name'] in layers:
                            layers.remove(service['display_name'])

        targetTree = QTreeWidgetItem(['Layers'])
        targetTree.setText(0, 'Layers')
        for layer in layers:
            pathTree = QTreeWidgetItem([layer])
            pathTree.setFlags(pathTree.flags() | QtCore.Qt.CheckStateRole)
            pathTree.setCheckState(0, QtCore.Qt.Unchecked)
            pathTree.setText(0, layer)
            targetTree.addChild(pathTree)
        list_widget.addTopLevelItem(targetTree)
        list_widget.expandAll()

    def save_layers_to_db(self, tree_selection, layer_selection):
        """
        Save newly created layers to database.
        :param tree_selection:
        :param layer_selection:
        :return:
        """
        continue_flag = True
        print ("Entered save")
        proj = QgsProject.instance()
        vectorLayer = proj.mapLayersByName(layer_selection[0])
        if len(vectorLayer) > 0:
            vectorLayer = vectorLayer[0]
        features = vectorLayer.getFeatures()

        flag, _id = self.database.create_metrics_subcategory(tree_selection[0], layer_selection[0])
        if flag:
            records_save = []
            for feature in features:
                feature_data = {'circle_name':None, 'ward_name':None, 'updated_at':str(datetime.datetime.now()),
                                'created_at':str(datetime.datetime.now())}
                # print("Feature ID: ", feature.id())
                geom = feature.geometry()
                geometry_data = geom.asJson()
                attrs = feature.attributes()
                attrs_names = feature.fields().names()
                properties = {x[0].replace('.',''): x[1] if x[1] != NULL else '' for x in zip(attrs_names, attrs)}
                feature_data['properties'] = properties
                feature_data['geometry'] = json.loads(geometry_data)
                feature_data['service_metric_id'] = _id
                feature_data['asset_type'] = layer_selection[0].replace(' ','_')
                records_save.append(feature_data)

            if self.database.check_metrics_assets_exists(_id) and len(records_save) > 0:
                buttonReply = QMessageBox.question(self.dlg.centralwidget, 'Save Layer',
                                                      "Layer already have features stored. Do you want to delete them?",
                                                      QMessageBox.Yes|QMessageBox.No)
                if buttonReply == QMessageBox.Yes:
                    self.database.delete_metrics_assets(_id)
                else:
                    buttonReplyContinue = QMessageBox.question(self.dlg.centralwidget, 'Save Layer',
                                                          "Do you still want to continue saving?",
                                                          QMessageBox.Yes | QMessageBox.No)
                    if buttonReplyContinue == QMessageBox.No:
                        continue_flag = False


            if continue_flag:
                saved_count = self.database.save_metrics_assests(records_save)
                QMessageBox.information(self.dlg.centralwidget, "Save Layer", "Layer saved successfully. <br/>Added "+str(saved_count) + " features out of "+str(len(records_save))+".", QMessageBox.Yes)
            else:
                print("Exiting.........")

        return True

